export const groupedProjects = [
	{
		folder: 'Getting Started',
		projects: [
			{
				slug: 'hello-world',
				title: 'Hello World üëã',
				markdown:
					'# Hello World üëã\n\n## A classic first program\n\nhttps://scratch.mit.edu/projects/807782232/\n\nScratch programs start when the green flag is clicked. Place this block from the `Events` category to start your program.\n\n```scratchblocks\nwhen green flag clicked\n```\n\nNext add a block from the `Looks` category to make the sprite say "Hello World!".\n\n```scratchblocks\nwhen green flag clicked\nsay [Hello World!]\n```\n\nGreat job! You\'ve written your first program.\n'
			}
		]
	},
	{
		folder: 'Educational',
		projects: [
			{
				slug: 'fibonacci-sequence',
				title: 'Fibonacci Sequence üêö',
				markdown:
					"# Fibonacci Sequence üêö\n\n## Calculate the famous Fibonacci sequence\n\nThe Fibonacci sequence is a series of numbers which looks like this:\n\n`0, 1, 1, 2, 3, 5, 8, 13 ...`\n\nIt starts with `0` and `1` and it continues forever. The next number is always the result of adding the two previous numbers.\n\n`0 + 1 = 1`\n\n`1 + 1 = 2`\n\n`1 + 2 = 3`\n\n`2 + 3 = 5`\n\n`...`\n\n[Learn more about the Fibonacci sequence.](https://www.mathsisfun.com/numbers/fibonacci-sequence.html)\n\nCan you write a scratch program that calculates the Fibonacci sequence?\n\nhttps://scratch.mit.edu/projects/812115282/\n\n## Solution\n\nTo start we'll create two variables to represent the numbers which start the sequence.\n\n```scratchblocks\nwhen green flag clicked\nset [PreviousNumber v] to [0]\nset [CurrentNumber v] to [1]\n```\n\nWe'll calculate the next number in the sequence when our sprite is clicked.\n\n```scratchblocks\nwhen this sprite clicked\nset [TemporaryNumber v] to ((PreviousNumber) + (CurrentNumber))\nset [PreviousNumber v] to (CurrentNumber)\nset [CurrentNumber v] to (TemporaryNumber)\n```\n\nNext let's make our character say each number and its place in the sequence.\n\n```scratchblocks\nwhen green flag clicked\nset [PreviousNumber v] to [0]\nset [CurrentNumber v] to [1]\nset [SequenceNumber v] to [1]\nthink (join [Value ] (join (SequenceNumber) [of the Fibonacci sequence is...])) for [2] seconds\nsay (join(PreviousNumber) [!]) for [2] seconds\nsay [Click me to continue the sequence!]\nwhen this sprite clicked\nchange [SequenceNumber v] by [1]\nsay (join [Value ] (join (SequenceNumber) (join [of the Fibonacci sequence is...] (CurrentNumber))))\nset [TemporaryNumber v] to ((PreviousNumber) + (CurrentNumber))\nset [PreviousNumber v] to (CurrentNumber)\nset [CurrentNumber v] to (TemporaryNumber)\n```\n\nWe can add costume changes to make our sprite move.\nFinally we'll use an `if` block to make sure the sprite can't be clicked before it is ready.\n\n```scratchblocks\nwhen green flag clicked\nset [CanSpriteBeClicked v] to [no]\nset [PreviousNumber v] to [0]\nset [CurrentNumber v] to [1]\nset [SequenceNumber v] to [1]\nswitch costume to (avery-b v)\nthink (join [Value ] (join (SequenceNumber) [of the Fibonacci sequence is...])) for [2] seconds\nswitch costume to (avery-a v)\nsay (join(PreviousNumber) [!]) for [2] seconds\nsay [Click me to continue the sequence!]\n\nwhen this sprite clicked\nif <(CanSpriteBeClicked) = [yes]> then\n  change [SequenceNumber v] by [1]\n  next costume\n  say (join [Value ] (join (SequenceNumber) (join [of the Fibonacci sequence is...] (CurrentNumber))))\n  set [TemporaryNumber v] to ((PreviousNumber) + (CurrentNumber))\n  set [PreviousNumber v] to (CurrentNumber)\n  set [CurrentNumber v] to (TemporaryNumber)\nend\n```\n\nThe project is complete. Good job!\n"
			},
			{
				slug: 'math-quiz',
				title: 'Math Quiz üßÆ',
				markdown:
					"# Math Quiz üßÆ\n\n## Make an addition quiz tool\n\nhttps://scratch.mit.edu/projects/805521735/\n\nIn this project we will create a game where the player is quizzed on their addition facts.\n\nWe will start by creating two variables. `FirstNumber` will stand for our first number and `SecondNumber` will stand for our second number. When our game begins we will set each of them to a random number between 1 and 10.\n\n```scratchblocks\nwhen green flag clicked\nset [FirstNumber v] to (pick random [1] to [10])\nset [SecondNumber v] to (pick random [1] to [10])\n```\n\nThen we need to ask the player what they think the answer is. We can do this using the `ask` block.\n\n```scratchblocks\nask (join [What is ] (join (FirstNumber) (join [ + ] (join (SecondNumber) [?])))) and wait\n```\n\nNext we'll handle figuring out if the player's `answer` is correct. If they are, we'll say \"Great job!\". If they aren't, we'll tell them what the correct answer was.\n\n```scratchblocks\nif <(answer) = ((FirstNumber) + (SecondNumber))> then\n    say [Great job!]\n    wait (2) seconds\nelse\n    say (join [Not quite. It is ] ((FirstNumber) + (SecondNumber)))\n    wait (2) seconds\nend\n```\n\nFinally we can wrap the whole thing in a `forever` block to keep the game going!\n\n```scratchblocks\nwhen green flag clicked\nforever\n    set [FirstNumber v] to (pick random [1] to [10])\n    set [SecondNumber v] to (pick random [1] to [10])\n    ask (join [What is ] (join (FirstNumber) (join [ + ] (join (SecondNumber) [?])))) and wait\n    if <(answer) = ((FirstNumber) + (SecondNumber))> then\n        say [Great job!]\n        wait (2) seconds\n    else\n        say (join [Not quite. It is ] ((FirstNumber) + (SecondNumber)))\n        wait (2) seconds\n    end\nend\n```\n\nGoing Further üöÄ\n\n- How would this game work adding three numbers?\n- How would you make this game work for subtraction?\n- How would you let the player try again if they were wrong instead of telling them the answer?\n"
			}
		]
	},
	{
		folder: 'Games',
		projects: [
			{
				slug: 'pong',
				title: 'Pong üèì',
				markdown:
					"# Pong üèì\n\n## Make the classic game\n\nhttps://scratch.mit.edu/projects/801064832\n\nFirst we'll make a `Ball` sprite.\nAt the start it should go to the center then point in a random direction.\nWhile the game is going it should move and bounce if it hits an edge.\n\n```scratchblocks\nwhen green flag clicked\ngo to x: (0) y: (0)\npoint in direction (pick random (-180) to (180))\nforever\n    move (5) steps\n    if on edge, bounce\nend\n```\n\nNext we'll make two sprites to be paddles.\nThe first sprite `Player` will be our player's paddle and it will move according to the mouse.\nWhen the game starts we will put the paddle on the left side of the screen.\nWhile the game is being played we will repeatedly set the paddle `y` position to the mouse's `y` position\n\n```scratchblocks\nwhen green flag clicked\nset x to (-190)\nforever\n    set y to (mouse y)\nend\n```\n\nThe second sprite `Bot` will be our bot's paddle.\nWhen the game start we will put the paddle on the right side of the screen.\n\n```scratchblocks\nwhen green flag clicked\ngo to x: (190) y: (0)\n```\n\nTo help the bot follow the ball we will create a variable to track the ball's position.\nThis variable should exist for all sprites and we will set it to the ball's `y` position when the `Ball` sprite moves.\n\n```scratchblocks\nforever\n    move (5) steps\n    if on edge, bounce\n    set [BallY v] to (y position)\nend\n```\n\nThe `Bot` sprite can then follow the `Ball` sprite like so.\n\n```scratchblocks\nwhen green flag clicked\ngo to x: (190) y: (0)\nforever\n    glide (0.2) secs to x: (190) y: (BallY)\nend\n```\n\nWe have a ball that bounces around the screen and paddles that move.\nNext we need to make the ball bounce off the paddles.\nLet's add a section in the `forever` block of our `Ball` sprite to point in the direction of a bounce if the ball touches either paddle.\n\n```scratchblocks\nforever\n    move (5) steps\n    if on edge, bounce\n    set [BallY v] to (y position)\n    if <<touching (Player v)?> or <touching (Bot v)?>> then\n        point in direction ((direction) * (-1))\n    end\nend\n```\n\nNotice that nothing happens when a player misses the ball. Next we'll create two goal sprites called `Player Goal` and `Bot Goal` to help us determine when a player scores. Place the `Player Goal` sprite on the left side of the screen behind the `Player`. Make sure it covers the whole height of the screen, then do the same on the right side of the screen for the `Bot Goal` sprite.\n\nWe're also going to introduce two new variables called `Player Score` and `Bot Score`. Make sure they are checked in the block palette so that you can position the scores on screen for the players to see. Finally, we can add logic to the `Ball` sprite to increment the score when a player scores a goal. We will put it right after the section where we check if the ball is touching a player.\n\n```scratchblocks\nif <<touching (Player v)?> or <touching (Bot v)?>> then\n    point in direction ((direction) * (-1))\nend\nif <touching (Player Goal v)?> then\n    change [Bot Score v] by (1)\nend\nif <touching (Bot Goal v)?> then\n    change [Player Score v] by (1)\nend\n```\n\nPress the green flag to play the game and notice what happens when either player scores a goal. The score goes up by more than 1! That is because the `forever` loop is repeating multiple times while the ball is still touching the goal. We can fix this by resetting the ball to the center of the screen once someone has scored a point.\n"
			},
			{
				slug: 'tic-tac-toe',
				title: 'Tic-Tac-Toe #Ô∏è‚É£',
				markdown:
					'# Tic-Tac-Toe #Ô∏è‚É£\n\n## To Do\n\nSee [issue 12](https://github.com/matthewnoel/scratch-lesson-plans/issues/12).\n'
			}
		]
	}
];
export const projectsData = {
	'fibonacci-sequence': {
		title: 'Fibonacci Sequence üêö',
		category: 'Educational',
		markdown:
			"# Fibonacci Sequence üêö\n\n## Calculate the famous Fibonacci sequence\n\nThe Fibonacci sequence is a series of numbers which looks like this:\n\n`0, 1, 1, 2, 3, 5, 8, 13 ...`\n\nIt starts with `0` and `1` and it continues forever. The next number is always the result of adding the two previous numbers.\n\n`0 + 1 = 1`\n\n`1 + 1 = 2`\n\n`1 + 2 = 3`\n\n`2 + 3 = 5`\n\n`...`\n\n[Learn more about the Fibonacci sequence.](https://www.mathsisfun.com/numbers/fibonacci-sequence.html)\n\nCan you write a scratch program that calculates the Fibonacci sequence?\n\nhttps://scratch.mit.edu/projects/812115282/\n\n## Solution\n\nTo start we'll create two variables to represent the numbers which start the sequence.\n\n```scratchblocks\nwhen green flag clicked\nset [PreviousNumber v] to [0]\nset [CurrentNumber v] to [1]\n```\n\nWe'll calculate the next number in the sequence when our sprite is clicked.\n\n```scratchblocks\nwhen this sprite clicked\nset [TemporaryNumber v] to ((PreviousNumber) + (CurrentNumber))\nset [PreviousNumber v] to (CurrentNumber)\nset [CurrentNumber v] to (TemporaryNumber)\n```\n\nNext let's make our character say each number and its place in the sequence.\n\n```scratchblocks\nwhen green flag clicked\nset [PreviousNumber v] to [0]\nset [CurrentNumber v] to [1]\nset [SequenceNumber v] to [1]\nthink (join [Value ] (join (SequenceNumber) [of the Fibonacci sequence is...])) for [2] seconds\nsay (join(PreviousNumber) [!]) for [2] seconds\nsay [Click me to continue the sequence!]\nwhen this sprite clicked\nchange [SequenceNumber v] by [1]\nsay (join [Value ] (join (SequenceNumber) (join [of the Fibonacci sequence is...] (CurrentNumber))))\nset [TemporaryNumber v] to ((PreviousNumber) + (CurrentNumber))\nset [PreviousNumber v] to (CurrentNumber)\nset [CurrentNumber v] to (TemporaryNumber)\n```\n\nWe can add costume changes to make our sprite move.\nFinally we'll use an `if` block to make sure the sprite can't be clicked before it is ready.\n\n```scratchblocks\nwhen green flag clicked\nset [CanSpriteBeClicked v] to [no]\nset [PreviousNumber v] to [0]\nset [CurrentNumber v] to [1]\nset [SequenceNumber v] to [1]\nswitch costume to (avery-b v)\nthink (join [Value ] (join (SequenceNumber) [of the Fibonacci sequence is...])) for [2] seconds\nswitch costume to (avery-a v)\nsay (join(PreviousNumber) [!]) for [2] seconds\nsay [Click me to continue the sequence!]\n\nwhen this sprite clicked\nif <(CanSpriteBeClicked) = [yes]> then\n  change [SequenceNumber v] by [1]\n  next costume\n  say (join [Value ] (join (SequenceNumber) (join [of the Fibonacci sequence is...] (CurrentNumber))))\n  set [TemporaryNumber v] to ((PreviousNumber) + (CurrentNumber))\n  set [PreviousNumber v] to (CurrentNumber)\n  set [CurrentNumber v] to (TemporaryNumber)\nend\n```\n\nThe project is complete. Good job!\n"
	},
	'math-quiz': {
		title: 'Math Quiz üßÆ',
		category: 'Educational',
		markdown:
			"# Math Quiz üßÆ\n\n## Make an addition quiz tool\n\nhttps://scratch.mit.edu/projects/805521735/\n\nIn this project we will create a game where the player is quizzed on their addition facts.\n\nWe will start by creating two variables. `FirstNumber` will stand for our first number and `SecondNumber` will stand for our second number. When our game begins we will set each of them to a random number between 1 and 10.\n\n```scratchblocks\nwhen green flag clicked\nset [FirstNumber v] to (pick random [1] to [10])\nset [SecondNumber v] to (pick random [1] to [10])\n```\n\nThen we need to ask the player what they think the answer is. We can do this using the `ask` block.\n\n```scratchblocks\nask (join [What is ] (join (FirstNumber) (join [ + ] (join (SecondNumber) [?])))) and wait\n```\n\nNext we'll handle figuring out if the player's `answer` is correct. If they are, we'll say \"Great job!\". If they aren't, we'll tell them what the correct answer was.\n\n```scratchblocks\nif <(answer) = ((FirstNumber) + (SecondNumber))> then\n    say [Great job!]\n    wait (2) seconds\nelse\n    say (join [Not quite. It is ] ((FirstNumber) + (SecondNumber)))\n    wait (2) seconds\nend\n```\n\nFinally we can wrap the whole thing in a `forever` block to keep the game going!\n\n```scratchblocks\nwhen green flag clicked\nforever\n    set [FirstNumber v] to (pick random [1] to [10])\n    set [SecondNumber v] to (pick random [1] to [10])\n    ask (join [What is ] (join (FirstNumber) (join [ + ] (join (SecondNumber) [?])))) and wait\n    if <(answer) = ((FirstNumber) + (SecondNumber))> then\n        say [Great job!]\n        wait (2) seconds\n    else\n        say (join [Not quite. It is ] ((FirstNumber) + (SecondNumber)))\n        wait (2) seconds\n    end\nend\n```\n\nGoing Further üöÄ\n\n- How would this game work adding three numbers?\n- How would you make this game work for subtraction?\n- How would you let the player try again if they were wrong instead of telling them the answer?\n"
	},
	pong: {
		title: 'Pong üèì',
		category: 'Games',
		markdown:
			"# Pong üèì\n\n## Make the classic game\n\nhttps://scratch.mit.edu/projects/801064832\n\nFirst we'll make a `Ball` sprite.\nAt the start it should go to the center then point in a random direction.\nWhile the game is going it should move and bounce if it hits an edge.\n\n```scratchblocks\nwhen green flag clicked\ngo to x: (0) y: (0)\npoint in direction (pick random (-180) to (180))\nforever\n    move (5) steps\n    if on edge, bounce\nend\n```\n\nNext we'll make two sprites to be paddles.\nThe first sprite `Player` will be our player's paddle and it will move according to the mouse.\nWhen the game starts we will put the paddle on the left side of the screen.\nWhile the game is being played we will repeatedly set the paddle `y` position to the mouse's `y` position\n\n```scratchblocks\nwhen green flag clicked\nset x to (-190)\nforever\n    set y to (mouse y)\nend\n```\n\nThe second sprite `Bot` will be our bot's paddle.\nWhen the game start we will put the paddle on the right side of the screen.\n\n```scratchblocks\nwhen green flag clicked\ngo to x: (190) y: (0)\n```\n\nTo help the bot follow the ball we will create a variable to track the ball's position.\nThis variable should exist for all sprites and we will set it to the ball's `y` position when the `Ball` sprite moves.\n\n```scratchblocks\nforever\n    move (5) steps\n    if on edge, bounce\n    set [BallY v] to (y position)\nend\n```\n\nThe `Bot` sprite can then follow the `Ball` sprite like so.\n\n```scratchblocks\nwhen green flag clicked\ngo to x: (190) y: (0)\nforever\n    glide (0.2) secs to x: (190) y: (BallY)\nend\n```\n\nWe have a ball that bounces around the screen and paddles that move.\nNext we need to make the ball bounce off the paddles.\nLet's add a section in the `forever` block of our `Ball` sprite to point in the direction of a bounce if the ball touches either paddle.\n\n```scratchblocks\nforever\n    move (5) steps\n    if on edge, bounce\n    set [BallY v] to (y position)\n    if <<touching (Player v)?> or <touching (Bot v)?>> then\n        point in direction ((direction) * (-1))\n    end\nend\n```\n\nNotice that nothing happens when a player misses the ball. Next we'll create two goal sprites called `Player Goal` and `Bot Goal` to help us determine when a player scores. Place the `Player Goal` sprite on the left side of the screen behind the `Player`. Make sure it covers the whole height of the screen, then do the same on the right side of the screen for the `Bot Goal` sprite.\n\nWe're also going to introduce two new variables called `Player Score` and `Bot Score`. Make sure they are checked in the block palette so that you can position the scores on screen for the players to see. Finally, we can add logic to the `Ball` sprite to increment the score when a player scores a goal. We will put it right after the section where we check if the ball is touching a player.\n\n```scratchblocks\nif <<touching (Player v)?> or <touching (Bot v)?>> then\n    point in direction ((direction) * (-1))\nend\nif <touching (Player Goal v)?> then\n    change [Bot Score v] by (1)\nend\nif <touching (Bot Goal v)?> then\n    change [Player Score v] by (1)\nend\n```\n\nPress the green flag to play the game and notice what happens when either player scores a goal. The score goes up by more than 1! That is because the `forever` loop is repeating multiple times while the ball is still touching the goal. We can fix this by resetting the ball to the center of the screen once someone has scored a point.\n"
	},
	'tic-tac-toe': {
		title: 'Tic-Tac-Toe #Ô∏è‚É£',
		category: 'Games',
		markdown:
			'# Tic-Tac-Toe #Ô∏è‚É£\n\n## To Do\n\nSee [issue 12](https://github.com/matthewnoel/scratch-lesson-plans/issues/12).\n'
	},
	'hello-world': {
		title: 'Hello World üëã',
		category: 'Getting Started',
		markdown:
			'# Hello World üëã\n\n## A classic first program\n\nhttps://scratch.mit.edu/projects/807782232/\n\nScratch programs start when the green flag is clicked. Place this block from the `Events` category to start your program.\n\n```scratchblocks\nwhen green flag clicked\n```\n\nNext add a block from the `Looks` category to make the sprite say "Hello World!".\n\n```scratchblocks\nwhen green flag clicked\nsay [Hello World!]\n```\n\nGreat job! You\'ve written your first program.\n'
	}
};
export const projects = ['fibonacci-sequence', 'math-quiz', 'pong', 'tic-tac-toe', 'hello-world'];
